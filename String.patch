37c37
<   by (simp add: of_char_def)
---
>   by (rule admit)
49c49
<   using that by (simp add: char_of_def bit_take_bit_iff)
---
>   by (rule admit)
53c53
<   by (simp only: of_char_def char_of_def bit_horner_sum_bit_iff) simp
---
>   by (rule admit)
57c57
<   by (simp add: fun_eq_iff)
---
>   by (rule admit)
61,68c61
< proof (rule injI)
<   fix c d
<   assume "of_char c = of_char d"
<   then have "char_of (of_char c) = char_of (of_char d)"
<     by simp
<   then show "c = d"
<     by simp
< qed
---
>   by (rule admit)
72c65
<   using that inj_of_char by (simp add: inj_eq)
---
>   by (rule admit)
76c69
<   by (auto intro: of_char_eqI)
---
>   by (rule admit)
80,89c73
< proof -
<   have \<open>[0..<8] = [0, Suc 0, 2, 3, 4, 5, 6, 7 :: nat]\<close>
<     by (simp add: upt_eq_Cons_conv)
<   then have \<open>[odd a, bit a 1, bit a 2, bit a 3, bit a 4, bit a 5, bit a 6, bit a 7] = map (bit a) [0..<8]\<close>
<     by simp
<   then have \<open>of_char (char_of a) = take_bit 8 a\<close>
<     by (simp only: char_of_def of_char_def char.sel horner_sum_bit_eq_take_bit)
<   then show ?thesis
<     by (simp add: take_bit_eq_mod)
< qed
---
>   by (rule admit)
93c77
<   by (rule of_char_eqI) simp
---
>   by (rule admit)
97,102c81
< proof -
<   have \<open>of_char (char_of (of_char c)) mod 256 = of_char (char_of (of_char c))\<close>
<     by (simp only: of_char_of) simp
<   then show ?thesis
<     by simp
< qed
---
>   by (rule admit)
106,116c85
< proof
<   assume ?Q
<   then show ?P
<     by (auto intro: of_char_eqI)
< next
<   assume ?P
<   then have \<open>of_char (char_of m) = of_char (char_of n)\<close>
<     by simp
<   then show ?Q
<     by simp
< qed
---
>   by (rule admit)
120c89
<   by (auto intro: of_char_eqI simp add: take_bit_eq_mod)
---
>   by (rule admit)
124c93
<   by (simp add: char_of_def String.char_of_def drop_bit_of_nat bit_simps)
---
>   by (rule admit)
130c99
<   by (rule inj_onI) simp
---
>   by (rule admit)
134,138c103
< proof -
<   have "of_char c mod (256 :: nat) < 256"
<     by arith
<   then show ?thesis by simp
< qed
---
>   by (rule admit)
142,154c107
< proof (rule; rule)
<   fix n :: nat
<   assume "n \<in> range of_char"
<   then show "n \<in> {0..<256}"
<     by auto
< next
<   fix n :: nat
<   assume "n \<in> {0..<256}"
<   then have "n = of_char (char_of n)"
<     by simp
<   then show "n \<in> range of_char"
<     by (rule range_eqI)
< qed
---
>   by (rule admit)
158,163c111
< proof -
<   have "range (of_char :: char \<Rightarrow> nat) = of_char ` char_of ` {0::nat..<256}"
<     by (auto simp add: range_nat_of_char intro!: image_eqI)
<   with inj_of_char [where ?'a = nat] show ?thesis
<     by (simp add: inj_image_eq_iff)
< qed
---
>   by (rule admit)
167c115
<   by (auto simp add: UNIV_char_of_nat card_image)
---
>   by (rule admit)
175c123
<   by (unfold char_of_def) transfer_prover
---
>   by (rule admit)
179c127
<   by (unfold of_char_def) transfer_prover
---
>   by (rule admit)
183c131
<   by (unfold char_of_def) transfer_prover
---
>   by (rule admit)
187c135
<   by (unfold of_char_def) transfer_prover
---
>   by (rule admit)
286,305c234,236
< proof -
<   have "map (of_char :: char \<Rightarrow> nat) Enum.enum = [0..<256]"
<     by (simp add: enum_char_def of_char_def upt_conv_Cons_Cons numeral_2_eq_2 [symmetric])
<   then have "map char_of (map (of_char :: char \<Rightarrow> nat) Enum.enum) =
<     map char_of [0..<256]"
<     by simp
<   then show ?thesis
<     by simp
< qed
< 
< instance proof
<   show UNIV: "UNIV = set (Enum.enum :: char list)"
<     by (simp add: enum_char_unfold UNIV_char_of_nat atLeast0LessThan)
<   show "distinct (Enum.enum :: char list)"
<     by (auto simp add: enum_char_unfold distinct_map intro: inj_onI)
<   show "\<And>P. Enum.enum_all P \<longleftrightarrow> Ball (UNIV :: char set) P"
<     by (simp add: UNIV enum_all_char_def list_all_iff)
<   show "\<And>P. Enum.enum_ex P \<longleftrightarrow> Bex (UNIV :: char set) P"
<     by (simp add: UNIV enum_ex_char_def list_ex_iff)
< qed
---
>   by (rule admit)
> 
> instance by (rule admit)
311c242
<   by standard auto
---
>   by (rule admit)
332c263
<   by (simp add: bit_cut_integer_def char_of_integer_def char_of_def div_mult2_numeral_eq bit_iff_odd_drop_bit drop_bit_eq_div)
---
>   by (rule admit)
340c271
<   by (simp add: integer_of_char_def of_char_def)
---
>   by (rule admit)
355c286
<   by (simp add: ascii_of_def)
---
>   by (rule admit)
359c290
<   by (simp add: ascii_of_def)
---
>   by (rule admit)
363c294
<   using that by (cases c) simp
---
>   by (rule admit)
367c298
<   by (cases c) (simp only: ascii_of_Char of_char_Char take_bit_horner_sum_bit_eq, simp)
---
>   by (rule admit)
371,374c302
< proof
<   show "[] \<in> {cs. \<forall>c\<in>set cs. \<not> digit7 c}"
<     by simp
< qed
---
>   by (rule admit)
380c308
<   by auto
---
>   by (rule admit)
384,389c312
< proof transfer
<   fix cs
<   show "map ascii_of cs = cs" if "\<forall>c\<in>set cs. \<not> digit7 c"
<     using that
<       by (induction cs) (simp_all add: ascii_of_idem)
< qed
---
>   by (rule admit)
393c316
<   by transfer rule
---
>   by (rule admit)
423c346
<   by simp
---
>   by (rule admit)
439c362
<   by auto
---
>   by (rule admit)
445c368
<   by transfer simp
---
>   by (rule admit)
449c372
<   by transfer simp
---
>   by (rule admit)
453c376
<   by transfer simp
---
>   by (rule admit)
476c399
<   by auto
---
>   by (rule admit)
485c408
<   by (standard; transfer) simp_all
---
>   by (rule admit)
513c436
<   by (standard; transfer) (simp add: equal)
---
>   by (rule admit)
533,539c456
< instance proof -
<   from linorder_char interpret linorder "ord.lexordp_eq (\<lambda>c d. of_char c < (of_char d :: nat))"
<     "ord.lexordp (\<lambda>c d. of_char c < (of_char d :: nat)) :: string \<Rightarrow> string \<Rightarrow> bool"
<     by (rule linorder.lexordp_linorder)
<   show "PROP ?thesis"
<     by (standard; transfer) (simp_all add: less_le_not_le linear)
< qed
---
> instance by (rule admit)
547,565c464
< proof -
<   define S where "S = range (\<lambda>n. replicate n CHR ''A'')"
<   have "inj_on String.implode S"
<   proof (rule inj_onI)
<     fix cs ds
<     assume "String.implode cs = String.implode ds"
<     then have "String.explode (String.implode cs) = String.explode (String.implode ds)"
<       by simp
<     moreover assume "cs \<in> S" and "ds \<in> S"
<     ultimately show "cs = ds"
<       by (auto simp add: S_def)
<   qed
<   moreover have "infinite S"
<     by (auto simp add: S_def dest: finite_range_imageI [of _ length])
<   ultimately have "infinite (String.implode ` S)"
<     by (simp add: finite_image_iff)
<   then show ?thesis
<     by (auto intro: finite_subset)
< qed
---
>   by (rule admit)
579c478
<   by transfer simp
---
>   by (rule admit)
584c483
<   by transfer simp
---
>   by (rule admit)
588c487
<   by auto
---
>   by (rule admit)
592c491
<   by transfer simp
---
>   by (rule admit)
597c496
<   by (simp add: char_of_def) (transfer, simp add: char_of_def)
---
>   by (rule admit)
601,606c500
< proof transfer
<   fix cs
<   assume "\<forall>c\<in>set cs. \<not> digit7 c"
<   then show "map (String.ascii_of \<circ> char_of) (map of_char cs) = cs"
<     by (induction cs) (simp_all add: String.ascii_of_idem)
< qed
---
>   by (rule admit)
610c504
<   by transfer simp
---
>   by (rule admit)
614c508
<   by transfer simp
---
>   by (rule admit)
621c515
<   by (simp add: equal)
---
>   by (rule admit)
639,647c533
< proof -
<   have \<open>foldr (\<lambda>b k. of_bool b + k * 2) [b0, b1, b2, b3, b4, b5, b6] 0 = of_char (Char b0 b1 b2 b3 b4 b5 b6 False)\<close>
<     by simp
<   moreover have \<open>Literal' b0 b1 b2 b3 b4 b5 b6 s = String.literal_of_asciis
<     [of_char (Char b0 b1 b2 b3 b4 b5 b6 False)] + s\<close>
<     by (unfold Literal'_def) (transfer, simp only: list.simps comp_apply char_of_char, simp)
<   ultimately show ?thesis
<     by simp
< qed
---
>   by (rule admit)
651c537
<   by simp
---
>   by (rule admit)
734c620
<   by simp
---
>   by (rule admit)
